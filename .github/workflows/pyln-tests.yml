# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "add-pyln-tests-ci-workflow" ]
  pull_request:
    branches: [ "add-pyln-tests-ci-workflow" ]

permissions:
  contents: read

jobs:
  prebuild:
    name: Pre-build checks
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    env:
      BOLTDIR: bolts
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Rebase
        # We can't rebase if we're on master already.
        if: github.ref != 'refs/heads/master'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git fetch origin ${{ github.base_ref }}
          git rebase origin/${{ github.base_ref }}

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          bash -x .github/scripts/setup.sh
          pip install -U pip wheel poetry
          # Export and then use pip to install into the current env
          poetry export -o /tmp/requirements.txt --without-hashes --with dev
          pip install -r /tmp/requirements.txt
          # We're going to check BOLT quotes, so get the latest version
          git clone https://github.com/lightning/bolts.git ../${BOLTDIR}
      - name: Configure
        run: ./configure --enable-debugbuild --enable-rust
      - name: Check source
        run: make -j 4 check-source BASE_REF="origin/${{ github.base_ref }}"
      - name: Check Generated Files have been updated
        run: make -j 4 check-gen-updated
      - name: Check docs
        run: make -j 4 check-doc

  compile:
    name: Compile CLN ${{ matrix.cfg }}
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs:
      - prebuild
    strategy:
      fail-fast: true
      matrix:
        include:
          - CFG: compile-gcc
            VALGRIND: 1
            COMPILER: gcc
          - CFG: compile-gcc-O3
            VALGRIND: 1
            COMPILER: gcc
            COPTFLAGS_VAR: COPTFLAGS="-O3 -Werror"
          # While we're at it let's try to compile with clang
          - CFG: compile-clang
            VALGRIND: 1
            COMPILER: clang
          - CFG: compile-clang-sanitizers
            COMPILER: clang
            ASAN: 1
            UBSAN: 1
            VALGRIND: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          bash -x .github/scripts/setup.sh

      - name: Build
        env:
          COMPILER: ${{ matrix.COMPILER }}
          ASAN: ${{ matrix.ASAN }}
          UBSAN: ${{ matrix.UBSAN }}
          VALGRIND: ${{ matrix.VALGRIND }}
          COMPAT: 1
          CFG: ${{ matrix.CFG }}
        run: |
          set -e
          pip3 install --user pip wheel poetry
          poetry export -o requirements.txt --with dev --without-hashes
          python3 -m pip install -r requirements.txt
          ./configure --enable-debugbuild CC="$COMPILER" ${{ matrix.COPTFLAGS_VAR }}

          make -j $(nproc) testpack.tar.bz2

          # Rename now so we don't clash
          mv testpack.tar.bz2 cln-${CFG}.tar.bz2
      - name: Check rust packages
        run: cargo test --all
      - uses: actions/upload-artifact@v3
        with:
          name: cln-${{ matrix.CFG }}.tar.bz2
          path: cln-${{ matrix.CFG }}.tar.bz2

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install dependencies
      # working-directory: tests
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install -C tests --no-interaction --no-root
    #    if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #- name: Lint with flake8
    #  run: |
    #    # stop the build if there are Python syntax errors or undefined names
    #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install bitcoind
      env:
        BITCOIN_VERSION: 25.1
        ELEMENTS_VERSION: 22.0.2
      run: .github/scripts/install-bitcoind.sh

    - name: Download CLN build
      uses: actions/download-artifact@v3
      with:
        name: cln-compile-gcc.tar.bz2

    - name: Unpack CLN build
      run: tar -xvjf cln-compile-gcc.tar.bz2

    - name: Run pyln-testing tests
      run: |
        poetry run -C tests pytest tests/test_rpc.py
